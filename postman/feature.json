{
	"info": {
		"_postman_id": "234846a2-f360-420e-8657-3e3f2e8cd69f",
		"name": "Explore with me API Feature",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4009081",
		"_collection_link": "https://test77-2960.postman.co/workspace/explore-with-me-plus~b9455346-2145-479d-8026-03dab93a5cc1/collection/4009081-234846a2-f360-420e-8657-3e3f2e8cd69f?action=share&source=collection_link&creator=4009081"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Comment Private API",
					"item": [
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user;\r",
											"    try {\r",
											"        user = rnd.getUser();\r",
											"    } catch(err) {\r",
											"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(user),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"userId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π userId:\", target.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Kasandra.Stroman211111@gmail.com\",\r\n    \"name\": \"Jessica Treutel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.annotation).equal(source.annotation, '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.description).equal(source.description, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"\r",
											"        pm.environment.set(\"eventId\", target.id);\r",
											"        console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π eventId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
										}
									]
								},
								"description": "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–µ—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"commentId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π commentId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"This is was a great event!\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments/events/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments",
										"events",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"Updated comment text\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}/events/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments",
										"{{commentId}}",
										"events",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Size is 1 and comment is published\", function () {\r",
											"    pm.expect(Array.isArray(target)).to.be.true;\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200\", function() {\r",
											"    pm.response.to.be.success;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}/events/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments",
										"{{commentId}}",
										"events",
										"{{eventId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comment Admin API",
					"item": [
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user;\r",
											"    try {\r",
											"        user = rnd.getUser();\r",
											"    } catch(err) {\r",
											"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(user),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"userId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π userId:\", target.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Kasandra.Stroman211111@gmail.com\",\r\n    \"name\": \"Jessica Treutel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.annotation).equal(source.annotation, '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.description).equal(source.description, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"\r",
											"        pm.environment.set(\"eventId\", target.id);\r",
											"        console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π eventId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
										}
									]
								},
								"description": "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–µ—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"commentId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π commentId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"This is was a great event!\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments/events/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments",
										"events",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"id\");\r",
											"    pm.expect(response).to.have.property(\"text\");\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"created\");\r",
											"    pm.expect(response).to.have.property(\"status\",'PENDING');\r",
											"});\r",
											"\r",
											"// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤\r",
											"pm.test(\"Save comment ID\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.collectionVariables.set(\"commentId\", response.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"PUBLISHED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æc–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞\r",
											"pm.test(\"Response has correct structure\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"id\");\r",
											"    pm.expect(response).to.have.property(\"text\");\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"created\");\r",
											"     pm.expect(response).to.have.property(\"status\",'PUBLISHED');\r",
											"});\r",
											"\r",
											"// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤\r",
											"pm.test(\"Save comment ID\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.collectionVariables.set(\"commentId\", response.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200\", function() {\r",
											"    pm.response.to.be.success;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Comment Public API",
					"item": [
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let user;\r",
											"    try {\r",
											"        user = rnd.getUser();\r",
											"    } catch(err) {\r",
											"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(user),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"userId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π userId:\", target.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"Kasandra.Stroman211111@gmail.com\",\r\n    \"name\": \"Jessica Treutel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('state');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.title).equal(source.title, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.annotation).equal(source.annotation, '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.paid.toString()).equal(source.paid.toString(), '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.eventDate).equal(source.eventDate, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.description).equal(source.description, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
											"\r",
											"        pm.environment.set(\"eventId\", target.id);\r",
											"        console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π eventId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
										}
									]
								},
								"description": "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–µ—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"commentId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π commentId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"This is was a great event!\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments/events/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments",
										"events",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.environment.set(\"commentId\", target.id);\r",
											"    console.log(\"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π commentId:\", target.id);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"text\": \"This is was a great event!\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/{{userId}}/comments/events/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"{{userId}}",
										"comments",
										"events",
										"{{eventId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"PUBLISHED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Size is 1 and comment is published\", function () {\r",
											"    pm.expect(Array.isArray(target)).to.be.true;\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('eventIAnnotation');\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/{{eventId}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"{{eventId}}",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ post-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ patch-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ get-–∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–∫–∞.\\n\", err,\r",
					"                             \"\\n–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ \" + \r",
					"                             \"–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è - \", response.code, \", —Ç–µ–ª–æ: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://template.postman-echo.com"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		}
	]
}